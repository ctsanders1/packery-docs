---
title: Options
---

<div class="primary-content">

<h2>itemSelector</h2>

<div class="param">
  <p class="param-bit type">
    <b>Type:</b>
    <span class="value">Selector <i>String</i></span>
  </p>
</div>

<p>Specifies which child elements to be used as item elements. Setting <code>itemSelector</code> is always recommended. <code>itemSelector</code> is useful to exclude <a href="#element-sizing">sizing elements</a>.</p>

``` js
"itemSelector": ".item"
```

</div><div class="primary-content">

<h2>columnWidth</h2>

<div class="param">
  <p class="param-bit type">
    <b>Type:</b>
    <span class="value"><i>Number</i>, <i>Element</i>, or Selector <i>String</i></span>
  </p>
</div>

<p>The width of a column of a horizontal grid. When set, Packery will align item elements horizontally to this grid.</p>

<div class="row example">
  <div class="cell example-code">
``` js
"columnWidth": 60
```
  </div>
  <div class="cell demo">
    <div class="packery js-packery"  data-packery-options='{ "columnWidth": 60 }'>
      <div class="item"></div>
      <div class="item w2"></div>
      <div class="item"></div>
      <div class="item"></div>
      <div class="item h2"></div>
      <div class="item"></div>
      <div class="item h2"></div>
      <div class="item"></div>
      <div class="item h2"></div>
      <div class="item"></div>
      <div class="item"></div>
      <div class="item"></div>
      <div class="item h2"></div>
      <div class="item"></div>
      <div class="item"></div>
    </div>
    <p class="edit"><a href="http://codepen.io/desandro/pen/eouHb">Edit this example on CodePen</a></p>
  </div>
</div>

<p>If set to an <i>Element</i> or Selector <i>String</i>, Packery will use the width of that element. See <a href="#element-sizing">Element sizing</a>. Setting <code>columnWidth</code> with element sizing is recommended if you are using percentage widths for <code>columnWidth</code>.</p>

<p>Enable <code>percentPosition: true</code> to reduce transitions on resize.</p>

<div class="row example">
  <div class="cell example-code">
``` html
<div class="packery">
  <div class="grid-sizer"></div>
  <div class="item"></div>
  <div class="item"></div>
  ...
</div>
```
``` css
.grid-sizer,
.item {
  width: 20%;
}
.item.w2 {
  width: 40%;
}
```
``` js
"itemSelector": ".item",
"columnWidth": ".grid-sizer",
"percentPosition": true
```
  </div>
  <div class="cell demo">
    {{> percent-width }}
  </div>
</div>

</div><div class="primary-content">

<h2>rowHeight</h2>

<div class="param">
  <p class="param-bit type">
    <b>Type:</b>
    <span class="value"><i>Number</i>, <i>Element</i>, or Selector <i>String</i></span>
  </p>
</div>

<p>Height of a row of a vertical grid. When set, Packery will align item elements vertically to this grid.</p>

<div class="row example">
  <div class="cell example-code">
``` js
"rowHeight": 60
```
  </div>
  <div class="cell demo">
    <div class="packery js-packery" data-packery-options='{ "rowHeight": 60 }'>
      <div class="item"></div>
      <div class="item"></div>
      <div class="item h2"></div>
      <div class="item w2"></div>
      <div class="item w4"></div>
      <div class="item"></div>
      <div class="item w4"></div>
      <div class="item w2"></div>
      <div class="item"></div>
      <div class="item w2"></div>
      <div class="item"></div>
      <div class="item"></div>
      <div class="item w2"></div>
      <div class="item"></div>
    </div>
    <p class="edit"><a href="http://codepen.io/desandro/pen/KGcqD">Edit this example on CodePen</a></p>
  </div>
</div>

<p>If set to an <i>Element</i> or Selector <i>String</i>, Packery will use the height of that element. See <a href="#element-sizing">Element sizing</a>.</p>

<div class="row example">
  <div class="cell example-code">
``` html
<div id="row-height-demo2">
  <div class="grid-sizer"></div>
  <div class="item"></div>
  <div class="item"></div>
  ...
</div>
```
``` css
#row-height-demo2 .grid-sizer { height: 60px; }
```
``` js
"rowHeight": ".grid-sizer",
"itemSelector": ".item"
```
  </div>
  <div class="cell demo">
    <div id="row-height-demo2" class="packery js-packery" data-packery-options='{ "rowHeight": ".grid-sizer", "itemSelector": ".item" }'>
      <div class="grid-sizer"></div>
      <div class="item"></div>
      <div class="item"></div>
      <div class="item h2"></div>
      <div class="item w2"></div>
      <div class="item w4"></div>
      <div class="item"></div>
      <div class="item w4"></div>
      <div class="item w2"></div>
      <div class="item"></div>
      <div class="item w2"></div>
      <div class="item"></div>
      <div class="item"></div>
      <div class="item w2"></div>
      <div class="item"></div>
    </div>
    <p class="edit"><a href="http://codepen.io/desandro/pen/dElba">Edit this example on CodePen</a></p>
  </div>
</div>

</div><div class="primary-content">

<h2>gutter</h2>

<div class="param">
  <p class="param-bit type">
    <b>Type:</b>
    <span class="value"><i>Number</i>, <i>Element</i>, or Selector <i>String</i></span>
  </p>
</div>

<p>The space between item elements, both vertically and horizontally.</p>

<div class="row example">
  <div class="cell example-code">
``` js
"gutter": 10
```
  </div>
  <div class="cell demo">
    <div class="packery js-packery" data-packery-options='{ "gutter": 10 }'>
      <div class="item"></div>
      <div class="item w2"></div>
      <div class="item"></div>
      <div class="item h2"></div>
      <div class="item w2"></div>
      <div class="item"></div>
      <div class="item w2 h2"></div>
      <div class="item"></div>
      <div class="item h2"></div>
      <div class="item w2"></div>
      <div class="item"></div>
      <div class="item w2"></div>
      <div class="item h2"></div>
      <div class="item"></div>
      <div class="item"></div>
    </div>
    <p class="edit"><a href="http://codepen.io/desandro/pen/fIbHB">Edit this example on CodePen</a></p>
  </div>
</div>

<p>If set to an <i>Element</i> or Selector <i>String</i>, Packery will use the width of that element. See <a href="#element-sizing">Element sizing</a>.</p>

<div class="row example">
  <div class="cell example-code">
``` html
<div id="gutter-demo2">
  <div class="gutter-sizer"></div>
  <div class="item"></div>
  <div class="item"></div>
  ...
</div>
```
``` css
#gutter-demo2 .gutter-sizer { width: 3%; }
```
``` js
"gutter": ".gutter-sizer",
"itemSelector": ".item"
```
  </div>
  <div class="cell demo" >
    <div id="gutter-demo2" class="packery js-packery" data-packery-options='{ "gutter": ".gutter-sizer", "itemSelector": ".item" }'>
      <div class="gutter-sizer"></div>
      <div class="item"></div>
      <div class="item w2"></div>
      <div class="item"></div>
      <div class="item h2"></div>
      <div class="item w2"></div>
      <div class="item"></div>
      <div class="item w2 h2"></div>
      <div class="item"></div>
      <div class="item h2"></div>
      <div class="item w2"></div>
      <div class="item"></div>
      <div class="item w2"></div>
      <div class="item h2"></div>
      <div class="item"></div>
      <div class="item"></div>
    </div>
    <p class="edit"><a href="http://codepen.io/desandro/pen/buyLF">Edit this example on CodePen</a></p>
  </div>
</div>

</div><div class="primary-content">

<h2>Element sizing</h2>

<p>For the sizing options <a href="#columnwidth"><code>columnWidth</code></a>, <a href="#rowheight"><code>rowHeight</code></a>, and <a href="#gutter"><code>gutter</code></a>, you may set these options to an <i>Element</i> or <i>String</i>, in addition to a <i>Number</i>.</p>

<p>With an <i>Element</i>, Packery will use its width or height to set the value of the related property.</p>

``` html
<div id="container">
  <div class="grid-sizer"></div>
  <div class="item"></div>
  <div class="item"></div>
  ...
</div>
```

``` js
var $container = $('#container').packery({
  itemSelector: '.item',
  columnWidth: $container.find('.grid-sizer')[0]
});
```

<p>With a <i>String</i>, Packery will use the string as a selector to get the first matching element within the container element. The size of that element is then used.</p>

``` js
"columnWidth": ".grid-sizer"
```

<p>This allows you to control the size of the Packery layout just with your CSS. This is useful for responsive layouts, keeping control within CSS so you can rely on media queries.</p>

``` css
/* 5 columns by default */
.grid-sizer { width: 20%; }

@media screen and (min-width: 720px) {
  /* 10 columns for larger screens */
  .grid-sizer { width: 10%; }
}
```

<p>If you are using element sizing, be sure to set <a href="#itemselector"><code>itemSelector</code></a> as well, so the sizing element does not get used in the layout.</p>

</div><div class="primary-content">

<h2>percentPosition</h2>

<div class="param">
  <p class="param-bit type">
    <b>Type:</b>
    <span class="value"><i>Boolean</i></span>
  </p>
  <p class="param-bit default">
    <b>Default:</b>
    <span class="value"><code><span class="literal">false</span></code></span>
  </p>
</div>

<p>Will set item position in percent values, rather than pixel values. <code>percentPosition</code> works well with percent-width items, as items will not transition their position on resize.</p>

<div class="row example">
  <div class="cell example-code">
``` css
.grid-sizer,
.item {
  width: 20%;
}
.item.w2 {
  width: 40%;
}
```
``` js
"itemSelector": ".item",
"columnWidth": ".grid-sizer",
"percentPosition": true
```
  </div>
  <div class="cell demo">
    {{> percent-width }}
  </div>
</div>


</div><div class="primary-content">

<h2>stamp</h2>

<div class="param">
  <p class="param-bit type">
    <b>Type:</b>
    <span class="value"><i>Element</i>, <i>NodeList</i>, <i>Array</i> of Elements, or Selector <i>String</i></span>
  </p>
</div>

<p>Specifies which elements are <em>stamped</em> within the layout. These are special layout elements which will not be laid out by Packery. Rather, Packery will layout item elements <em>around</em> stamped elements.</p>

<p>The <code>stamp</code> option stamps elements only when the Packery instance is first initialized. You can stamp additional elements afterwards with the <a href="methods.html#stamp"><code>stamp</code> method</a>.</p>

<div class="row example">
  <div class="cell example-code">
``` html
<div id="stamp-opt-demo">
  <div class="stamp stamp1"></div>
  <div class="stamp stamp2"></div>
  <div class="item"></div>
  <div class="item"></div>
  ....
</div>
```
``` js
"itemSelector": ".item",
"stamp": ".stamp"
```
``` css
/* position stamped elements with CSS */
#stamp-opt-demo {
  position: relative;
}
#stamp-opt-demo .stamp {
  position: absolute;
  width: 30%;
  height: 60px;
  background: red;
  border: 4px dotted white;
}
#stamp-opt-demo .stamp1 {
  left: 20%;
  top: 10px;
}
#stamp-opt-demo .stamp2 {
  right: 10%;
  top: 80px;
}
```
  </div>
  <div class="cell demo">
    <div id="stamp-opt-demo" class="packery has-stamp js-packery" data-packery-options='{ "itemSelector": ".item", "stamp": ".stamp" }'>
      <div class="stamp stamp1"></div>
      <div class="stamp stamp2"></div>
      <div class="item"></div>
      <div class="item w2"></div>
      <div class="item"></div>
      <div class="item h2"></div>
      <div class="item w2"></div>
      <div class="item"></div>
      <div class="item w2 h2"></div>
      <div class="item w4"></div>
      <div class="item h4"></div>
      <div class="item w2"></div>
      <div class="item"></div>
      <div class="item w2"></div>
      <div class="item h2"></div>
      <div class="item"></div>
      <div class="item"></div>
      <div class="item w2"></div>
      <div class="item"></div>
      <div class="item h2"></div>
      <div class="item"></div>
    </div>
    <p class="edit"><a href="http://codepen.io/desandro/pen/Hqwib">Edit this example on CodePen</a></p>
  </div>
</div>

</div><div class="primary-content">

<h2>isHorizontal</h2>

<div class="param">
  <p class="param-bit type">
    <b>Type:</b>
    <span class="value"><i>Boolean</i></span>
  </p>
</div>

<p>Arranges items horizontally instead of vertically.</p>

<div class="row example">
  <div class="cell example-code">
``` js
"isHorizontal": true
```
``` css
/* containers need height set when horizontal */
.packery.horizontal {
  height: 200px;
}
```
  </div>
  <div class="cell demo">
    <div class="packery js-packery horizontal counting"  data-packery-options='{ "isHorizontal": true }'>
      {{>demo-items}}
    </div>
    <p class="edit"><a href="http://codepen.io/desandro/pen/cbLyJ">Edit this example on CodePen</a></p>
  </div>
</div>

</div><div class="primary-content">

<h2>isOriginLeft</h2>

<div class="param">
  <p class="param-bit type">
    <b>Type:</b>
    <span class="value"><i>Boolean</i></span>
  </p>
  <p class="param-bit default">
    <b>Default:</b>
    <span class="value"><code><span class="literal">true</span></code></span>
  </p>
</div>

<p>Controls the horizontal flow of the layout. By default, item elements start positioning at the left. Set to <code><span class="literal">false</span></code> for right-to-left layouts.</p>

<div class="row example">
  <div class="cell example-code">
``` js
"isOriginLeft": false
```
  </div>
  <div class="cell demo">
    <div class="packery js-packery counting" data-packery-options='{ "isOriginLeft": false }'>
      {{>demo-items}}
    </div>
    <p class="edit"><a href="http://codepen.io/desandro/pen/rBmsE">Edit this example on CodePen</a></p>
  </div>
</div>

</div><div class="primary-content">

<h2>isOriginTop</h2>

<div class="param">
  <p class="param-bit type">
    <b>Type:</b>
    <span class="value"><i>Boolean</i></span>
  </p>
  <p class="param-bit default">
    <b>Default:</b>
    <span class="value"><code><span class="literal">true</span></code></span>
  </p>
</div>

<p>Controls the vertical flow of the layout. By default, item elements start positioning at the top. Set to <code><span class="literal">false</span></code> for bottom-up layouts. It&rsquo;s like Tetris!</p>

<div class="row example">
  <div class="cell example-code">
``` js
"isOriginTop": false
```
  </div>
  <div class="cell demo">
    <div class="packery js-packery counting" data-packery-options='{ "isOriginTop": false }'>
      {{>demo-items}}
    </div>
    <p class="edit"><a href="http://codepen.io/desandro/pen/Bukmp">Edit this example on CodePen</a></p>
  </div>
</div>

</div><div class="primary-content">

<h2>transitionDuration</h2>

<div class="param">
  <p class="param-bit type">
    <b>Type:</b>
    <span class="value"><i>String</i></span>
  </p>
  <p class="param-bit default">
    <b>Default:</b>
    <span class="value"><code><span class="string">"0.4s"</span></code></span>
  </p>
</div>

<p>The time duration of transitions for item elements.</p>

</div><div class="primary-content">

<h2>containerStyle</h2>

<div class="param">
  <p class="param-bit type">
    <b>Type:</b>
    <span class="value"><i>Object</i></span>
  </p>
  <p class="param-bit default">
    <b>Default:</b>
    <span class="value"><code>{ position: <span class="string">'relative'</span> }</code></span>
  </p>
</div>

<p>CSS styles that are applied to the container element. To disable Packery from setting any CSS to the container element, set <code>containerStyle: <span class="literal">null</span></code>.</p>

</div><div class="primary-content">


<h2>isResizeBound</h2>

<div class="param">
  <p class="param-bit type">
    <b>Type:</b>
    <span class="value"><i>Boolean</i></span>
  </p>
  <p class="param-bit default">
    <b>Default:</b>
    <span class="value"><code><span class="literal">true</span></code></span>
  </p>
</div>

<p>Binds layout to window resizing.</p>

<p><code>isResizeBound</code> binds layout only when the Packery instance is first initialized. You can bind and unbind resize layout afterwards with the <a href="methods.html#bindresize"><code>bindResize</code></a> and <a href="methods.html#unbindresize"><code>unbindResize</code></a> methods.</p>


</div><div class="primary-content">

<h2>isInitLayout</h2>

<div class="param">
  <p class="param-bit type">
    <b>Type:</b>
    <span class="value"><i>Boolean</i></span>
  </p>
  <p class="param-bit default">
    <b>Default:</b>
    <span class="value"><code><span class="literal">true</span></code></span>
  </p>
</div>

<p>Enables layout on initialization. Set this to <code><span class="literal">false</span></code> to disable layout on initialization, so you can use <a href="methods.html">methods</a> or add <a href="events.html">events</a> before the initial layout.</p>

``` js
var $container = $('#container').packery({
  // disables initial layout
  isInitLayout: false
});
$container.packery( 'on', 'layoutComplete', function() {
  console.log('layout is complete');
});
// manually trigger initial layout
$container.packery();
```

</div>
